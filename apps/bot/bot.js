import TelegramBot from 'node-telegram-bot-api';
import axios from 'axios';
import winston from 'winston';
import dotenv from 'dotenv';

dotenv.config();

// –ß—Ç–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞ –∏ –±–∞–∑–æ–≤–æ–≥–æ URL API –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;

if (!BOT_TOKEN) {
  console.error('BOT_TOKEN is not defined!');
  process.exit(1);
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞
const logger = winston.createLogger({
  level: 'info',
  format: winston.format.combine(
    winston.format.timestamp(),
    winston.format.printf(({ level, message, timestamp }) => {
      return `${timestamp} [${level.toUpperCase()}]: ${message}`;
    })
  ),
  transports: [
    new winston.transports.Console(),
    new winston.transports.File({ filename: 'bot.log' }),
  ],
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });
const userTokens = {}; // –•—Ä–∞–Ω–∏–ª–∏—â–µ —Ç–æ–∫–µ–Ω–æ–≤: { chatId: token }

logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–µ
function handleError(chatId, error, message = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.') {
  bot.sendMessage(chatId, message);
  logger.error(error.message);
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async function handleStartCommand(msg) {
  const chatId = msg.chat.id;
  const name = msg.from.first_name || 'User';

  logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chatId: ${chatId}, name: ${name}`);
  try {
    // –®–∞–≥ 1: –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const response = await axios.post(
      'http://localhost:3000/api/auth/telegram',
      {
        chat_id: chatId,
        name,
      }
    );

    if (response.status === 200) {
      const { token } = response.data;
      userTokens[chatId] = token;

      // –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–ø—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞
      bot.sendMessage(
        chatId,
        `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!\n\n` +
          `–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç (—Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö):`
      );

      // –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ —Ç–µ–∫—É—â–µ–≥–æ –±—é–¥–∂–µ—Ç–∞
      bot.once('message', async (msg) => {
        const budgetInput = msg.text.trim();
        const netWorth = parseFloat(budgetInput);

        if (isNaN(netWorth) || netWorth < 0) {
          bot.sendMessage(
            chatId,
            '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.'
          );
          return;
        }

        try {
          // –®–∞–≥ 3: –û–±–Ω–æ–≤–ª—è–µ–º net_worth —á–µ—Ä–µ–∑ API
          const updateResponse = await axios.post(
            'http://localhost:3000/api/users/update-net-worth',
            {
              chat_id: chatId,
              net_worth: netWorth,
            },
            { headers: { Authorization: `Bearer ${token}` } }
          );

          if (updateResponse.status === 200) {
            bot.sendMessage(
              chatId,
              `‚úÖ –í–∞—à –±—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n\n` +
                `1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å\n` +
                `2Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é\n` +
                `3Ô∏è‚É£ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n\n` +
                `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.`,
              {
                reply_markup: {
                  keyboard: [
                    ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'],
                    ['üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'],
                  ],
                  resize_keyboard: true,
                },
              }
            );
          } else {
            bot.sendMessage(
              chatId,
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
          }
        } catch (err) {
          handleError(
            chatId,
            err,
            '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
          );
        }
      });
    } else {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    handleError(
      chatId,
      error,
      '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ "–ú–æ–π –±–∞–ª–∞–Ω—Å"
async function handleMyBalance(chatId, token) {
  try {
    const response = await axios.get('http://localhost:3000/api/users/me', {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (response.status === 200) {
      const { net_worth } = response.data; // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª–µ net_worth –∏–∑ –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–∞
      bot.sendMessage(chatId, `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${net_worth} üíµ`);
    } else {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
  } catch (error) {
    handleError(
      chatId,
      error,
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

async function createCategory(chatId, token, name, parentId) {
  try {
    const response = await axios.post(
      'http://localhost:3000/api/categories',
      { name, parent_id: parentId },
      { headers: { Authorization: `Bearer ${token}` } }
    );

    if (response.status === 200) {
      bot.sendMessage(chatId, `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${name}" —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!`);
    } else {
      bot.sendMessage(chatId, '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
    }
  } catch (error) {
    handleError(
      chatId,
      error,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}

async function handleAddCategory(chatId, token) {
  try {
    // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot.sendMessage(chatId, 'üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');

    // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot.once('message', async (msg) => {
      const categoryName = msg.text.trim();

      if (!categoryName) {
        bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingCategoriesResponse = await axios.get(
          'http://localhost:3000/api/categories',
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        const existingCategories = existingCategoriesResponse.data;

        const duplicateCategory = existingCategories.find(
          (cat) => cat.name.toLowerCase() === categoryName.toLowerCase()
        );

        if (duplicateCategory) {
          bot.sendMessage(
            chatId,
            '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.'
          );
          return;
        }

        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
        if (existingCategories.length > 0) {
          const options = existingCategories.map((category) => ({
            text: category.name,
            callback_data: `parent_${category.id}`,
          }));

          options.push({
            text: '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            callback_data: 'parent_null',
          });

          bot.sendMessage(
            chatId,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π:',
            {
              reply_markup: { inline_keyboard: [options] },
            }
          );

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          bot.once('callback_query', async (callbackQuery) => {
            const parentData = callbackQuery.data;

            let parentId = null;

            if (parentData.startsWith('parent_')) {
              const [, parentCategoryId] = parentData.split('_');
              parentId =
                parentCategoryId === 'null' ? null : parseInt(parentCategoryId);
            }

            await createCategory(chatId, token, categoryName, parentId);
          });
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
          await createCategory(chatId, token, categoryName, null);
        }
      } catch (err) {
        handleError(
          chatId,
          err,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    });
  } catch (err) {
    handleError(
      chatId,
      err,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}
// –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function handleAddTransaction(chatId, token) {
  bot.sendMessage(chatId, '–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üíµ –î–æ—Ö–æ–¥', callback_data: 'transaction_income' },
          { text: 'üí∏ –†–∞—Å—Ö–æ–¥', callback_data: 'transaction_expense' },
        ],
      ],
    },
  });

  bot.once('callback_query', async (callbackQuery) => {
    const transactionType = callbackQuery.data;
    const isIncome = transactionType === 'transaction_income';

    try {
      const categoryResponse = await axios.get(
        'http://localhost:3000/api/categories',
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (categoryResponse.status === 200 && categoryResponse.data.length > 0) {
        const categories = categoryResponse.data;
        const categoryButtons = categories.map((cat) => [
          { text: cat.name, callback_data: `category_${cat.id}` },
        ]);

        bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', {
          reply_markup: { inline_keyboard: categoryButtons },
        });

        bot.once('callback_query', async (callbackQuery) => {
          const categoryId = parseInt(callbackQuery.data.split('_')[1]);
          const selectedCategory = categories.find(
            (cat) => cat.id === categoryId
          );

          bot.sendMessage(
            chatId,
            `–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: "${selectedCategory.name}". –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ.`
          );

          bot.once('message', async (msg) => {
            const [amountText, ...descriptionParts] = msg.text.split(',');
            const amount = parseFloat(amountText.trim());
            const description = descriptionParts.join(',').trim();

            if (isNaN(amount) || amount <= 0) {
              bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.');
              return;
            }

            const finalAmount = isIncome ? amount : -amount;

            try {
              const transactionResponse = await axios.post(
                'http://localhost:3000/api/transactions',
                {
                  amount: finalAmount,
                  category_id: categoryId,
                  description: description || null,
                },
                { headers: { Authorization: `Bearer ${token}` } }
              );

              if (transactionResponse.status === 200) {
                bot.sendMessage(
                  chatId,
                  `‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\nüí∞ –°—É–º–º–∞: ${finalAmount}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${
                    selectedCategory.name
                  }\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description || '–Ω–µ—Ç'}`
                );
              } else {
                bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
              }
            } catch (error) {
              handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.');
            }
          });
        });
      } else {
        bot.sendMessage(
          chatId,
          '–£ –≤–∞—Å –µ—â–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é.'
        );
      }
    } catch (error) {
      handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.');
    }
  });
}

// –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–Ω–æ–ø–∫–∏ "–ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"
async function handleShowTransactions(chatId, token) {
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìÖ –ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é', callback_data: 'transactions_week' },
          { text: 'üìÖ –ó–∞ –º–µ—Å—è—Ü', callback_data: 'transactions_month' },
        ],
      ],
    },
  });

  bot.once('callback_query', async (callbackQuery) => {
    const period = callbackQuery.data;

    try {
      const response = await axios.get(
        `http://localhost:3000/api/transactions?period=${period}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (response.status === 200) {
        const transactions = response.data;
        if (transactions.length === 0) {
          bot.sendMessage(chatId, '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.');
        } else {
          const transactionList = transactions
            .map(
              (t) =>
                `üí∞ –°—É–º–º–∞: ${t.amount}, –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${
                  t.category_name
                }, –û–ø–∏—Å–∞–Ω–∏–µ: ${t.description || '–Ω–µ—Ç'}, –î–∞—Ç–∞: ${t.date}`
            )
            .join('\n');
          bot.sendMessage(chatId, `–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n${transactionList}`);
        }
      } else {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
      }
    } catch (error) {
      handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
    }
  });
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
bot.onText(/\/start/, handleStartCommand);

bot.on('message', async (msg) => {
  const chatId = msg.chat.id;
  const text = msg.text;
  const token = userTokens[chatId];

  if (!token) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    return;
  }

  switch (text) {
    case 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å':
      handleMyBalance(chatId, token);
      break;
    case 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é':
      handleAddTransaction(chatId, token);
      break;
    case 'üìÇ –î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
      handleAddCategory(chatId, token);
      break;
    case 'üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏':
      handleShowTransactions(chatId, token);
      break;
  }
});
