import axios from 'axios';
import { bot } from '../../bot.js';
import handleError from '../../utils/handleError.js';
import { createCategory } from './createCategory.js';

export async function handleAddCategory(chatId, token) {
  try {
    // –®–∞–≥ 1: –°–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot.sendMessage(chatId, 'üìÇ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');

    // –û–∂–∏–¥–∞–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    bot.once('message', async (msg) => {
      const categoryName = msg.text.trim();

      if (!categoryName) {
        bot.sendMessage(chatId, '‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
        return;
      }

      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º
        const existingCategoriesResponse = await axios.get(
          'http://localhost:3000/api/categories',
          {
            headers: { Authorization: `Bearer ${token}` },
          }
        );

        const existingCategories = existingCategoriesResponse.data;

        const duplicateCategory = existingCategories.find(
          (cat) => cat.name.toLowerCase() === categoryName.toLowerCase()
        );

        if (duplicateCategory) {
          bot.sendMessage(
            chatId,
            '‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.'
          );
          return;
        }

        // –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –µ—Å—Ç—å, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é
        if (existingCategories.length > 0) {
          const options = existingCategories.map((category) => ({
            text: category.name,
            callback_data: `parent_${category.id}`,
          }));

          options.push({
            text: '–ë–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
            callback_data: 'parent_null',
          });

          bot.sendMessage(
            chatId,
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –µ—ë –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π:',
            {
              reply_markup: { inline_keyboard: [options] },
            }
          );

          // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
          bot.once('callback_query', async (callbackQuery) => {
            const parentData = callbackQuery.data;

            let parentId = null;

            if (parentData.startsWith('parent_')) {
              const [, parentCategoryId] = parentData.split('_');
              parentId =
                parentCategoryId === 'null' ? null : parseInt(parentCategoryId);
            }

            await createCategory(chatId, token, categoryName, parentId);
          });
        } else {
          // –ï—Å–ª–∏ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π, —Å—Ä–∞–∑—É —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –±–µ–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π
          // TODO: –¥–µ–ª–∞—Ç—å –Ω–∞ –±—ç–∫–µ
          await createCategory(chatId, token, categoryName, null);
        }
      } catch (err) {
        handleError(
          chatId,
          err,
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
        );
      }
    });
  } catch (err) {
    handleError(
      chatId,
      err,
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}
