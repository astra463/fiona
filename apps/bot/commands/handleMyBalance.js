import axios from 'axios';
import { bot } from '../bot.js';
import handleError from '../utils/handleError.js';
import logger from '../utils/logger.js';
import { SERVER_URL } from '../config.js';
import { sessionManager } from '../utils/sessionManager.js';

export async function handleMyBalance(chatId) {
  // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
  const token = sessionManager.getToken(chatId);
  
  if (!token) {
    bot.sendMessage(chatId, '–°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ /start –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.');
    return;
  }
  try {
    const response = await axios.get(`${SERVER_URL}/api/users/me`, {
      headers: { Authorization: `Bearer ${token}` },
    });

    if (response.status === 200) {
      const { net_worth } = response.data;
      bot.sendMessage(
        chatId,
        `üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${net_worth.toLocaleString('ru-RU', {
          style: 'currency',
          currency: 'RUB',
        })} üíµ`
      );
    } else {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞.');
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
      error: error.message,
      stack: error.stack,
      chatId
    });
    handleError(
      chatId,
      error,
      '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}
