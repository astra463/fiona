import axios from 'axios';
import logger from '../utils/logger.js';
import { bot } from '../bot.js';
import { sessionManager } from '../utils/sessionManager.js';
import handleError from '../utils/handleError.js';
import { SERVER_URL } from '../config.js';

export async function handleStartCommand(msg) {
  const chatId = msg.chat.id;
  const name = msg.from.first_name || 'User';

  logger.info(`–ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /start –æ—Ç chatId: ${chatId}, name: ${name}`);

  try {
    logger.info(`–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä`, { chatId, name });
    
    const response = await axios.post(
      `${SERVER_URL}/api/auth/telegram`,
      {
        chat_id: chatId,
        name,
      }
    );

    if (response.status === 200) {
      const { token, net_worth } = response.data;
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–∫–µ–Ω –≤ –º–µ–Ω–µ–¥–∂–µ—Ä–µ —Å–µ—Å—Å–∏–π
      sessionManager.setToken(chatId, token, name);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–æ–≤—ã–π –ª–∏ —ç—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–±–∞–ª–∞–Ω—Å = 0)
      const isNewUser = net_worth === 0;
      
      logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω`, { 
        chatId, 
        name,
        isNewUser,
        net_worth
      });

      if (!isNewUser) {
        bot.sendMessage(chatId, `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!`, {
          reply_markup: {
            keyboard: [
              ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'],
              ['üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'],
            ],
            resize_keyboard: true,
          },
        });
      } else {
        bot.sendMessage(
          chatId,
          `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –±—é–¥–∂–µ—Ç (—Å—É–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —É –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–∞ —Ä—É–∫–∞—Ö):`
        );

        // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        sessionManager.clearSession(chatId, bot);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionManager.setState(chatId, 'entering_initial_balance');

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        const initialBalanceHandler = async (msg) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (msg.chat.id !== chatId) {
            return;
          }
          
          const budgetInput = msg.text.trim();
          const netWorth = parseFloat(budgetInput);

          if (isNaN(netWorth) || netWorth < 0) {
            bot.sendMessage(
              chatId,
              '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –¥–ª—è –≤–∞—à–µ–≥–æ –±—é–¥–∂–µ—Ç–∞.'
            );
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
            return;
          }

          try {
            logger.info(`–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`, { 
              chatId, 
              netWorth
            });
            
            // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
            const currentToken = sessionManager.getToken(chatId);
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
            const updateResponse = await axios.post(
              `${SERVER_URL}/api/users/update-net-worth`,
              {
                chat_id: chatId,
                net_worth: netWorth,
              },
              { headers: { Authorization: `Bearer ${currentToken}` } }
            );

            if (updateResponse.status === 200) {
              bot.sendMessage(chatId, '‚úÖ –í–∞—à –±—é–¥–∂–µ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!', {
                reply_markup: {
                  keyboard: [
                    ['üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å', 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é'],
                    ['üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏'],
                  ],
                  resize_keyboard: true,
                },
              });
            } else {
              bot.sendMessage(
                chatId,
                '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
              );
            }
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
          } catch (err) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞`, { 
              chatId, 
              error: err.message,
              stack: err.stack
            });
            handleError(
              chatId,
              err,
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            );
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
          }
        };
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        sessionManager.setMessageHandler(chatId, initialBalanceHandler, bot);
      }
    } else {
      bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
  } catch (error) {
    handleError(
      chatId,
      error,
      '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
    );
  }
}
