import axios from 'axios';
import { bot } from '../../bot.js';
import handleError from '../../utils/handleError.js';
import { default_categories } from '../constants/default_categories.js';
import { SERVER_URL } from '../../config.js';
import logger from '../../utils/logger.js';
import { sessionManager } from '../../utils/sessionManager.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—É–º–º—ã
const formatAmount = (amount) => {
  return amount.toLocaleString('ru-RU', {
    style: 'currency',
    currency: 'RUB',
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
const getUserBalance = async (token) => {
  try {
    const response = await axios.get(`${SERVER_URL}/api/users/me`, {
      headers: { Authorization: `Bearer ${token}` },
    });
    
    if (response.status === 200) {
      return response.data.net_worth;
    }
    return null;
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', {
      error: error.message,
      stack: error.stack
    });
    return null;
  }
};

export async function handleAddTransaction(chatId, token) {
  // –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  sessionManager.clearSession(chatId, bot);
  
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  sessionManager.setState(chatId, 'selecting_type');

  bot.sendMessage(chatId, '–≠—Ç–æ –¥–æ—Ö–æ–¥ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥?', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üíµ –î–æ—Ö–æ–¥', callback_data: 'transaction_income' },
          { text: 'üí∏ –†–∞—Å—Ö–æ–¥', callback_data: 'transaction_expense' },
        ],
      ],
    },
  });

  // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  const typeSelectionHandler = async (callbackQuery) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (callbackQuery.message.chat.id !== chatId) {
      return;
    }
    
    const transactionType = callbackQuery.data;
    const isIncome = transactionType === 'transaction_income';
    
    logger.info(`–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`, { 
      chatId, 
      transactionType,
      isIncome
    });

    if (isIncome) {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
      sessionManager.setState(chatId, 'entering_income');
      
      bot.sendMessage(
        chatId,
        '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫ –¥–æ—Ö–æ–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞, –∏—Å—Ç–æ—á–Ω–∏–∫.'
      );
      
      // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ—Ö–æ–¥–∞
      const incomeMessageHandler = async (msg) => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if (msg.chat.id !== chatId) {
          return;
        }
        
        const [amountText, ...descriptionParts] = msg.text.split(',');
        const amount = parseFloat(amountText.trim());
        const description = descriptionParts.join(',').trim();

        if (isNaN(amount) || amount <= 0) {
          bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.');
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          sessionManager.clearSession(chatId, bot);
          return;
        }

        try {
          logger.info(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞`, { 
            chatId, 
            amount,
            description
          });
          
          // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
          const currentToken = sessionManager.getToken(chatId);
          
          const response = await axios.post(
            `${SERVER_URL}/api/transactions`,
            {
              amount,
              category_id: null, // –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ—Ç
              description: description || '–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ —É–∫–∞–∑–∞–Ω',
            },
            { headers: { Authorization: `Bearer ${currentToken}` } }
          );

          // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
          const newBalance = await getUserBalance(currentToken);

          bot.sendMessage(
            chatId,
            `‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: ${formatAmount(amount)}\nüìù –ò—Å—Ç–æ—á–Ω–∏–∫: ${
              description || '–Ω–µ —É–∫–∞–∑–∞–Ω'
            }${
              newBalance !== null ? `\n\nüíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${formatAmount(newBalance)}` : ''
            }`
          );
          
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          sessionManager.clearSession(chatId, bot);
        } catch (error) {
          logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞`, { 
            chatId, 
            error: error.message
          });
          handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –¥–æ—Ö–æ–¥–∞.');
          // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          sessionManager.clearSession(chatId, bot);
        }
      };
      
      // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –¥–æ—Ö–æ–¥–∞
      sessionManager.setMessageHandler(chatId, incomeMessageHandler, bot);

      return;
    }

    // –î–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤—ã–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
    sessionManager.setState(chatId, 'selecting_category', {
      currentCategories: default_categories,
      path: [],
      selectedCategory: null,
      customCategories: [] // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    });
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    try {
      const currentToken = sessionManager.getToken(chatId);
      const response = await axios.get(
        `${SERVER_URL}/api/categories/custom`,
        { headers: { Authorization: `Bearer ${currentToken}` } }
      );
      
      if (response.status === 200) {
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        const sessionData = sessionManager.getData(chatId);
        sessionData.customCategories = response.data;
        sessionManager.setState(chatId, 'selecting_category', sessionData);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', { 
        error: error.message,
        chatId
      });
      // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    }

    const updateCategoriesMessage = () => {
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      const sessionData = sessionManager.getData(chatId);
      const currentCategories = sessionData.currentCategories;
      const path = sessionData.path;
      const selectedCategory = sessionData.selectedCategory;
      const customCategories = sessionData.customCategories || [];
      
      const categoryButtons = currentCategories.map((cat) => [
        { text: cat.name, callback_data: `category_${cat.id}` },
      ]);
      
      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –º—ã –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
      if (path.length === 0 && customCategories.length > 0) {
        customCategories.forEach(cat => {
          categoryButtons.push([
            { text: `üîπ ${cat.name}`, callback_data: `custom_category_${cat.id}` },
            { text: `üóëÔ∏è`, callback_data: `delete_custom_category_${cat.id}` }
          ]);
        });
      }
      
      // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∞ –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
      if (path.length === 0) {
        categoryButtons.push([
          { text: '‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é', callback_data: 'add_custom_category' }
        ]);
      }

      const navigationButtons = [];
      if (path.length > 0) {
        navigationButtons.push({
          text: 'üîô –ù–∞–∑–∞–¥',
          callback_data: 'category_back',
        });
      }
      if (selectedCategory) {
        navigationButtons.push({
          text: `‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å`,
          callback_data: 'category_confirm',
        });
      }

      if (navigationButtons.length > 0) {
        categoryButtons.push(navigationButtons);
      }

      bot.editMessageText(
        `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–∞:\n\n${
          selectedCategory
            ? `üîπ –í—ã–±—Ä–∞–Ω–∞: ${
                selectedCategory.isCustom 
                  ? selectedCategory.name 
                  : path.map((id) => findCategoryById(default_categories, id).name).join(' > ')
              }`
            : ''
        }`,
        {
          chat_id: chatId,
          message_id: callbackQuery.message.message_id,
          reply_markup: { inline_keyboard: categoryButtons },
        }
      );
    };

    updateCategoriesMessage();

    // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categorySelectionHandler = async (callbackQuery) => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (callbackQuery.message.chat.id !== chatId) {
        return;
      }
      
      const callbackData = callbackQuery.data;
      const state = sessionManager.getState(chatId);
      
      if (state !== 'selecting_category') {
        return;
      }

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
      const sessionData = sessionManager.getData(chatId);
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (callbackData === 'add_custom_category') {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionManager.setState(chatId, 'adding_custom_category', sessionData);
        
        bot.sendMessage(
          chatId,
          '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:'
        );
        
        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        const customCategoryNameHandler = async (msg) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (msg.chat.id !== chatId) {
            return;
          }
          
          const categoryName = msg.text.trim();
          
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞
          if (categoryName.startsWith('/') || 
              categoryName === 'üí∞ –ú–æ–π –±–∞–ª–∞–Ω—Å' || 
              categoryName === 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é' || 
              categoryName === 'üìú –ü–æ–∫–∞–∑–∞—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏') {
            bot.sendMessage(chatId, '–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:');
            return;
          }
          
          if (!categoryName) {
            bot.sendMessage(chatId, '–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:');
            return;
          }
          
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
            const currentToken = sessionManager.getToken(chatId);
            
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const response = await axios.post(
              `${SERVER_URL}/api/categories/custom`,
              {
                name: categoryName
              },
              { headers: { Authorization: `Bearer ${currentToken}` } }
            );
            
            if (response.status === 201) {
              const newCategory = response.data;
              
              // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
              sessionData.customCategories.push(newCategory);
              
              // –í—ã–±–∏—Ä–∞–µ–º –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
              sessionData.selectedCategory = {
                id: newCategory.id,
                name: newCategory.name,
                isCustom: true
              };
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
              sessionManager.setState(chatId, 'selecting_category', sessionData);
              
              bot.sendMessage(
                chatId,
                `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${categoryName}" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!`
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
              updateCategoriesMessage();
            }
          } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { 
              error: error.message,
              chatId,
              categoryName
            });
            handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
            
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            sessionManager.setState(chatId, 'selecting_category', sessionData);
            updateCategoriesMessage();
          }
        };
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        sessionManager.setMessageHandler(chatId, customCategoryNameHandler, bot);
        
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (callbackData.startsWith('delete_custom_category_')) {
        const categoryId = parseInt(callbackData.split('_')[3], 10);
        const customCategory = sessionData.customCategories.find(cat => cat.id === categoryId);
        
        if (customCategory) {
          try {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
            const currentToken = sessionManager.getToken(chatId);
            
            // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
            const response = await axios.delete(
              `${SERVER_URL}/api/categories/custom/${categoryId}`,
              { headers: { Authorization: `Bearer ${currentToken}` } }
            );
            
            if (response.status === 200) {
              // –£–¥–∞–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞
              sessionData.customCategories = sessionData.customCategories.filter(cat => cat.id !== categoryId);
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
              sessionManager.setState(chatId, 'selecting_category', sessionData);
              
              bot.sendMessage(
                chatId,
                `‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è "${customCategory.name}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!`
              );
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
              updateCategoriesMessage();
            }
          } catch (error) {
            logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:', { 
              error: error.message,
              chatId,
              categoryId
            });
            handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.');
          }
        }
        
        return;
      }
      
      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
      if (callbackData.startsWith('custom_category_')) {
        const categoryId = parseInt(callbackData.split('_')[2], 10);
        const customCategory = sessionData.customCategories.find(cat => cat.id === categoryId);
        
        if (customCategory) {
          sessionData.selectedCategory = {
            id: customCategory.id,
            name: customCategory.name,
            isCustom: true
          };
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
          sessionManager.setState(chatId, 'selecting_category', sessionData);
          
          updateCategoriesMessage();
        }
        
        return;
      }
      
      if (callbackData === 'category_back') {
        sessionData.path.pop();
        sessionData.selectedCategory =
          sessionData.path.length > 0
            ? findCategoryById(default_categories, sessionData.path[sessionData.path.length - 1])
            : null;
        sessionData.currentCategories =
          sessionData.path.length === 0 ? default_categories : sessionData.selectedCategory.children;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
        sessionManager.setState(chatId, 'selecting_category', sessionData);
        
        updateCategoriesMessage();
        return;
      }

      if (callbackData === 'category_confirm') {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ—Å—Å–∏–∏
        sessionManager.setState(chatId, 'entering_expense', sessionData);
        
        bot.sendMessage(
          chatId,
          '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) –≤ —Ñ–æ—Ä–º–∞—Ç–µ: —Å—É–º–º–∞, –æ–ø–∏—Å–∞–Ω–∏–µ.'
        );

        // –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞
        const expenseMessageHandler = async (msg) => {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          if (msg.chat.id !== chatId) {
            return;
          }
          
          const [amountText, ...descriptionParts] = msg.text.split(',');
          const amount = parseFloat(amountText.trim());
          const description = descriptionParts.join(',').trim();

          if (isNaN(amount) || amount <= 0) {
            bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—É–º–º—ã.');
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
            return;
          }

          try {
            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–µ—Å—Å–∏–∏
            const sessionData = sessionManager.getData(chatId);
            
            logger.info(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞`, { 
              chatId, 
              amount,
              category: sessionData.selectedCategory.id,
              description
            });
            
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –∏–∑ –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π
            const currentToken = sessionManager.getToken(chatId);
            
            const response = await axios.post(
              `${SERVER_URL}/api/transactions`,
              {
                amount: -amount,
                category_id: sessionData.selectedCategory.isCustom 
                  ? `custom_${sessionData.selectedCategory.id}` 
                  : sessionData.selectedCategory.id,
                description: description || null,
              },
              { headers: { Authorization: `Bearer ${currentToken}` } }
            );

            // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
            const newBalance = await getUserBalance(currentToken);
            
            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            let categoryText = '';
            if (sessionData.selectedCategory.isCustom) {
              categoryText = sessionData.selectedCategory.name;
            } else {
              categoryText = sessionData.path
                .map((id) => findCategoryById(default_categories, id).name)
                .join(' > ');
            }

            bot.sendMessage(
              chatId,
              `‚úÖ –†–∞—Å—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\nüí∞ –°—É–º–º–∞: ${formatAmount(-amount)}\nüìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: ${categoryText}\nüìù –û–ø–∏—Å–∞–Ω–∏–µ: ${description || '–Ω–µ—Ç'}${
                newBalance !== null ? `\n\nüíº –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${formatAmount(newBalance)}` : ''
              }`
            );
            
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
          } catch (error) {
            logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞`, { 
              chatId, 
              error: error.message
            });
            handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞.');
            // –û—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            sessionManager.clearSession(chatId, bot);
          }
        };
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–≤–æ–¥–∞ —Ä–∞—Å—Ö–æ–¥–∞
        sessionManager.setMessageHandler(chatId, expenseMessageHandler, bot);

        return;
      }

      const categoryId = parseInt(callbackData.split('_')[1], 10);
      const category = findCategoryById(default_categories, categoryId);

      if (!category) return;

      if (category.children) {
        sessionData.path.push(categoryId);
        sessionData.currentCategories = category.children;
        sessionData.selectedCategory = null;
      } else {
        sessionData.selectedCategory = category;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
      sessionManager.setState(chatId, 'selecting_category', sessionData);
      
      updateCategoriesMessage();
    };
    
    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    sessionManager.setCallbackHandler(chatId, categorySelectionHandler, bot);
  };
  
  // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
  sessionManager.setCallbackHandler(chatId, typeSelectionHandler, bot);
}

export const findCategoryById = (categories, id) => {
  for (const category of categories) {
    if (category.id === id) return category;
    if (category.children) {
      const found = findCategoryById(category.children, id);
      if (found) return found;
    }
  }
  return null;
};
