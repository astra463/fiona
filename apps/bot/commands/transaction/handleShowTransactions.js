import axios from 'axios';
import { bot } from '../../bot.js';
import handleError from '../../utils/handleError.js';
import logger from '../../utils/logger.js';
import { default_categories } from '../constants/default_categories.js';
import { findCategoryById } from './handleAddTransaction.js';
import { SERVER_URL } from '../../config.js';
export async function handleShowTransactions(chatId, token) {
  bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
    reply_markup: {
      inline_keyboard: [
        [
          { text: 'üìÖ –ó–∞ –ø—Ä–æ—à–ª—É—é –Ω–µ–¥–µ–ª—é', callback_data: 'transactions_week' },
          { text: 'üìÖ –ó–∞ –º–µ—Å—è—Ü', callback_data: 'transactions_month' },
        ],
      ],
    },
  });

  bot.once('callback_query', async (callbackQuery) => {
    const period = callbackQuery.data;

    try {
      const response = await axios.get(
        `${SERVER_URL}/api/transactions?period=${period}`,
        {
          headers: { Authorization: `Bearer ${token}` },
        }
      );

      if (response.status === 200) {
        const formatter = new Intl.DateTimeFormat('ru-RU', {
          day: 'numeric',
          month: 'long',
          year: 'numeric',
          hour: '2-digit',
          minute: '2-digit',
        });

        const transactions = response.data;
        if (transactions.length === 0) {
          bot.sendMessage(chatId, '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –Ω–µ—Ç.');
        } else {
          const transactionList = transactions
            .map((t) => {
              // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–¥–æ—Ö–æ–¥/—Ä–∞—Å—Ö–æ–¥) –ø–æ —Å—É–º–º–µ
              const isIncome = t.amount > 0;
              
              // –î–ª—è –¥–æ—Ö–æ–¥–æ–≤ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é, –¥–ª—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
              const categoryText = isIncome 
                ? '–î–æ—Ö–æ–¥' 
                : (t.category_id && findCategoryById(default_categories, t.category_id) 
                    ? findCategoryById(default_categories, t.category_id).name 
                    : '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏');
              
              return `
üí∞ –°—É–º–º–∞: ${t.amount}, 
${isIncome ? '–¢–∏–ø' : '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'}: ${categoryText}, 
–û–ø–∏—Å–∞–Ω–∏–µ: ${t.description || '–Ω–µ—Ç'}, 
${formatter.format(new Date(t.date))}`;
            })
            .join('\n');
          bot.sendMessage(chatId, `–í–∞—à–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n\n${transactionList}`);
        }
      } else {
        bot.sendMessage(chatId, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:', {
        error: error.message,
        stack: error.stack,
        chatId,
        period
      });
      handleError(chatId, error, '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.');
    }
  });
}
